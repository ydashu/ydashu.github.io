[{"content":"今天逛论坛的时候，发现一个1024的文章，写的真不错\n《一针见血》 你有没有发现，人一旦有了权力，就会变得非常的自以为是，变得非常固执，听不进别人的意见。\n为什么会这样呢？\n看到一句话，非常精妙地解释了这个现象：\n人本来就听不进别人的意见，只是有了权力以后，也就懒得再装了。\n《都是临时工》 捷克总统泽曼到外国访问，在捷克驻该国大使馆接受记者采访，一见记者泽曼就先做自我介绍说：\u0026ldquo;我是捷克总统，临时的。\u0026rdquo;\n记者们都笑了，气氛也轻松起来。\n总统先生的诙谐，其实倒是大实话，天下做官的，有哪一个不是临时的。别说做官，连我们做人也都是临时的呢，就这临时一辈子，做完就走人。看有人做官做得那么狠，看有人做人那么用尽心机，就好像他们做官做人都有一万年好做似的。说穿了怕要扫人兴，在这世上，我们个个都是临时工呢。\n《本心》 一书生借宿破寺院，离开后在路上发现行李中夹带了几根稻草，便不顾路途迢迢返回，将稻草交还了寺僧，寺中老僧感佩书生人品，盛情款待。并将自己化缘所得铸成金佛的秘密据实以告。\n书生再次离开后，老僧发现金佛不翼而飞，于是急忙追赶书生，饥寒交迫之下晕倒，被路人以一碗肉救活。老僧赶上书生后，发现他进入一矗立贞洁牌坊的门户，并在窗下听到了书生与贞妇的私情。老僧万念俱灰，叹道：\n不爱稻草爱黄金，贞洁烈妇会情人，和尚临老吃碗肉，如今世上无好人\u0026hellip;\u0026hellip;\n网友留言：\n“忠诚是因为背叛的筹码不够，正派是因为受到的诱惑不够”。\n归根结底，所有的人都没守住自己的本心，老僧起了炫耀之心，书生起了贪财之心，烈妇起了放纵之心。\n《投票》 学校食堂有位阿姨特别好，每次打菜都会给我们打特别多。有一次学校举行活动，请我们投票选出心目中最好的食堂阿姨，我们毫不犹豫地都投给了她。\n那天以后，我们就再也没有见到过她了\u0026hellip;..\n《领导说了一个笑话》 领导说了一个笑话，全办公室哄堂大笑，有抹眼泪的，有捂肚子的，有捶桌子的……\n只有小梅没笑，旁边同事边笑边问她：“你怎么不笑啊？”小梅淡定地说：“我已经辞职了。”\n《学政治的》 大学图书馆里，一个男孩问一个女孩：\u0026ldquo;我能坐你旁边吗？\u0026ldquo;女孩拔高了声音：\u0026ldquo;不！我不想和你过夜！\u0026rdquo;\n图书馆里的学生们都看向了他，他简直尴尬极了。过了几分钟，女孩走到了男孩桌子旁说：\u0026ldquo;我是学心理的，我非常懂男人都在想什么，你现在尴尬吧？\u0026rdquo;\n男孩突然大声说道：\u0026ldquo;一晚上1000？那也太贵了！\u0026rdquo;\n图书馆里的学生们，又震惊地看向女孩。男孩站起来，贴近女孩耳边低声说：\u0026ldquo;我是学政治的，我非常懂怎么毁掉一个人\u0026rdquo;。\n《去，把骨头扔到狗群里》 狼对老虎说：大王不好了，底下那帮狗正在密谋反抗。\n老虎擦擦嘴，淡定地把吃剩下的几根骨头扔给狼：去，把骨头扔到狗群里，回来躺着睡觉就是。狼恍然大悟，依计而行。\n第二天，群狗死伤无数，老虎来巡视慰问：唉！！告诉你们很多次，要团结，不要只顾争夺各自利益，你们怎么就是不听呢？\n《历史》 历史系教授刚走进教室准备上课时，突然从门外冲进两个歹徒。他们不由分说,三拳二脚就把教授打倒在地。\n满堂学生还不明白是怎么回事时，歹徒已经逃跑了。但这位教授站起身来，装作一副若无其事的样子对学生说，请每个同学拿出一张白纸，把刚才发生的事情当作作业叙述交上来。\n同学们写完后交给教授，全班几十个学生，竟有几十种不同的叙述。有的说歹徒打倒教授后，教授跳起来把他们打跑了。有的说教室冲进了两个神经病影响教授上课，被教授赶出去了。有的甚至说冲进了三个人，教授左脚踢飞一个，右脚踢飞一个，一拳又打倒一个在地上，后来他们爬起来逃跑了。教授把学生的描述一一念出来，学生都为他们不同版本的杰作而哄堂大笑。\n最后,只见这位教授抖了抖手里的作业纸说：\n如果你们要问什么是历史，那我告诉你们，这就是历史！\n《苍蝇的演讲》 一个苍蝇化妆成蜜蜂登上了讲坛，发表了关于如何专心采蜜远离污秽的专题演讲，讲到兴奋处，嘴角唾沫飞溅……\n演讲完毕，台下的“蜜蜂们”掌声雷动，有的甚至流下激动的眼泪。\n当它满怀欣慰地向主办方交还蜜蜂面具的时候，发现它的听众也在排队交还。\n后来，它们一起飞向厕所……\n《当愚昧成为主流， 清醒便是犯罪》 领导出差带回来一盒茶叶，把部门的人叫过来品茶。\nA尝了一口说，真香；B尝了一口说，很棒；\nC尝了一口说，很润；\nD尝了一口说，哎呀，不就是白开水吗？\n领导赶紧看看茶壶，然后尴尬地说，忘了放茶叶了。\n过了几天，D因为上班玩游戏被开除了。\n当愚昧成为主流， 清醒便是犯罪\n","date":"2024-12-26T00:00:00Z","permalink":"https://ydashu.github.io/p/%E5%86%85%E6%B6%B5%E7%9F%AD%E6%96%87/","title":"内涵短文"},{"content":"Front Matter的3种代码 hugo的Front Matter字段输出有3种形式，分别是\nyaml toml json 详细信息参考官方文档： gohugo.io\n常见的字段 title ：文章标题。自动生成的标题与文件名保持一致。 date：文章创建日期。默认生成的日期为文件创建时的日期。 lastmod：文章最后更新日期。 description：文章简要描述，用于摘要或 SEO 优化。 categories：文章分类。 tags：文章标签。 image：封面图片。 draft：是否为草稿。如果设置为 true，Hugo 将不会编译该文件，文章也不会在页面中显示。 hidden：是否隐藏文章。与 draft 的区别在于，设置为 true 的文章仍然存在，只是不会在页面中显示，但可以通过正确的网址访问。 toml demo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 +++ author = \u0026#34;Hugo Authors\u0026#34; # 作者名称，用于标识文章的创作者。 title = \u0026#34;Markdown Syntax Guide\u0026#34; # 文章标题，将显示在页面和导航中。 date = \u0026#34;2019-03-11\u0026#34; # 文章的发布日期，用于排序和展示。 description = \u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; # 文章的简短描述，通常用于摘要或 SEO。 tags = [ \u0026#34;markdown\u0026#34;, # 文章的标签，用于分类和搜索。标签是灵活的，可以添加多个。 \u0026#34;css\u0026#34;, \u0026#34;html\u0026#34;, \u0026#34;themes\u0026#34;, ] categories = [ \u0026#34;themes\u0026#34;, # 文章的类别，用于组织和过滤内容。每篇文章可以属于一个或多个类别。 \u0026#34;syntax\u0026#34;, ] series = [\u0026#34;Themes Guide\u0026#34;] # 文章系列，通常用于将相关文章组织在一起，例如教程或主题指南系列。 aliases = [\u0026#34;migrate-from-jekyl\u0026#34;] # 别名，用于创建文章的旧路径重定向到新路径。例如，当迁移文章时使用。 image = \u0026#34;pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg\u0026#34; # 文章的封面图片路径，用于展示文章时的视觉效果。 +++ ","date":"2024-12-24T00:00:00Z","permalink":"https://ydashu.github.io/p/front-matter-%E5%AD%97%E6%AE%B5%E8%AF%B4%E6%98%8E/","title":"Front Matter 字段说明"},{"content":"hugo:The world’s fastest framework for building websites\n自称是最快的建站框架 静态网站，hugo比hexo快 网站速度hugo \u0026gt; hexo \u0026gt; (wordpresss ? shopify) 可以零成本搭建（本地计算机 + github page等免费host ?+ github action自动触发） 官网：gohugo.io 下面以 windows本地计算机 + github page + github action展示建站流程\n下载并安装hugo 在 Hugo 的 Release 页面找到最新版本的 Hugo ，选择相应版本下载。windows为hugo_extended_X.XXX.X_windows-amd64.zip，X.XXX.X为版本号。\n创建站点 解压文件。在文件夹上方地址栏输入 cmd ，唤起命令行。在命令行中输入 hugo new site test_site ，创建站点。\n环境变量 将 hugo.exe 复制到test_site文件夹中，以避免配置环境变量。\n启动hugo cmd中输入cd test_site 或者关闭cmd窗口并在test_site中重新输入cmd cmd中输入命令hugo server 启动本地站点(通过 Ctrl + C 关闭这一服务)。地址通常是 localhost:1313 。如果页面显示“Page not found”，说明此前的所有配置都是正常无误的。 具体的hugo命令参考官网hugo conmands 配置主题 Hugo 默认是没有主题的，需要到 官网 去下载主题。我使用的主题是 Jimmy Cai 创作的 Stack 主题。接下来的部分内容会以此主题为例。\n下载Stack主题 hugo-theme-stack\n文件调整 将主题下载完成后重命名为hugo-theme-stack并解压至 themes 文件夹中，将test_site/themes/hugo-theme-stack/exampleSite/ 文件夹中 content 和hugo.yaml 复制到test_site/中，并删掉原来的 hugo.toml 和 Content/post/rich-content （rich-content中有需要梯子的链接，hugo server会出现错误），避免出现不兼容的错误。 修改 hugo.yaml 中的 theme 选项，将其修改为theme: hugo-theme-stack 检查网站 启动hugo server 检查网址localhost:1313是否是正常的stack主题 修改配置文件 hugo.yaml 中其他选项修改:\nlanguageCode: zh-cn title: XXX copyright: XXX DefaultContentLanguage: zh-cn hasCJKLanguage: true\n1 2 3 4 5 6 7 8 languages: zh-cn: languageName: 中文 title: ydashu weight: 1 params: sidebar: subtitle: 配置文件参数介绍 官方文档 stack文档 各项配置解释如下baseurl: https://example.com # 网站的基本 URL 。替换为你自己的网站域名。 languageCode: en-us # 网站的默认语言代码，zh-cn 指中文简体。 theme: hugo-theme-stack # 使用的 Hugo 主题，这里是 Stack 主题。 paginate: 3 # 每页显示的内容数量，通常用于分页设置。 title: Example Site # 网站的标题，会显示在浏览器标签上。 copyright: Example Person # 网站的版权信息，通常显示在页面底部。 # Theme i18n support # Available values: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw DefaultContentLanguage: en # 设置网站的默认内容语言。可选值见上注释。 # Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko] # This will make .Summary and .WordCount behave correctly for CJK languages. hasCJKLanguage: false # 如果默认语言是中文、日文或韩文，设置为 true 以确保摘要和字数统计正确。 languages: en: languageName: English # 英语语言配置 title: Example Site # 英文站点标题 weight: 1 # 语言权重，数值越小排序越靠前 params: description: Example description # 英文站点描述 zh-cn: languageName: 中文 # 中文语言配置 title: 演示站点 # 中文站点标题 weight: 2 # 中文站点语言权重 params: description: 演示说明 # 中文站点描述 ar: languageName: عربي # 阿拉伯语配置 languagedirection: rtl # 文字方向，从右到左 title: موقع تجريبي # 阿拉伯语站点标题 weight: 3 # 阿拉伯语站点语言权重 params: description: وصف تجريبي # 阿拉伯语站点描述 services: # Change it to your Disqus shortname before using disqus: shortname: \u0026#34;hugo-theme-stack\u0026#34; # Disqus 评论系统的短名称，需替换为你自己的 Disqus 短名称。 # GA Tracking ID googleAnalytics: id: # Google Analytics 追踪 ID，用于网站流量统计。 permalinks: post: /p/:slug/ # 博客文章的永久链接格式，使用文章的 slug 作为路径。 page: /:slug/ # 页面内容的永久链接格式。 params: mainSections: - post # 主内容区域，显示文章内容。 featuredImageField: image # 特色图片字段的名称。 rssFullContent: true # RSS 提要是否包含全文内容。 favicon: # e.g.: favicon placed in `static/favicon.ico` of your site folder, then set this field to `/favicon.ico` (`/` is necessary) # 网站的favicon路径，例如`/favicon.ico`。 footer: since: 2020 # 网站创建年份，通常显示在页脚。 customText: # 自定义页脚文本。 dateFormat: published: Jan 02, 2006 # 发布日期格式。 lastUpdated: Jan 02, 2006 15:04 MST # 最后更新日期格式。 sidebar: emoji: 🍥 # 侧边栏标题旁显示的 emoji。 subtitle: Lorem ipsum dolor sit amet, consectetur adipiscing elit. # 侧边栏的副标题。 avatar: enabled: true # 是否启用头像显示。 local: true # 是否使用本地头像。 src: img/avatar.png # 头像图片路径。 article: math: false # 是否支持数学公式渲染。 toc: true # 是否显示文章目录。 readingTime: true # 是否显示预计阅读时间。 license: enabled: true # 是否启用文章版权信息。 default: Licensed under CC BY-NC-SA 4.0 # 默认版权协议。 comments: enabled: true # 是否启用评论功能。 provider: disqus # 选择的评论提供商，默认为 Disqus。 disqusjs: shortname: # DisqusJS 的短名称。 apiUrl: # DisqusJS 的 API URL。 apiKey: # DisqusJS 的 API Key。 admin: # DisqusJS 的管理员用户名。 adminLabel: # DisqusJS 管理员标签。 utterances: repo: # Utterances 评论系统的 GitHub 仓库地址。 issueTerm: pathname # Utterances 评论系统的议题关联方式，使用页面路径。 label: # Utterances 评论系统的标签。 beaudar: repo: # Beaudar 评论系统的 GitHub 仓库地址。 issueTerm: pathname # Beaudar 评论系统的议题关联方式。 label: # Beaudar 评论系统的标签。 theme: # Beaudar 评论系统的主题。 remark42: host: # Remark42 的主机地址。 site: # Remark42 的站点标识符。 locale: # Remark42 的语言设置。 vssue: platform: # Vssue 使用的平台（例如 GitHub）。 owner: # Vssue 评论仓库的所有者。 repo: # Vssue 评论的 GitHub 仓库地址。 clientId: # Vssue 的 OAuth 应用 Client ID。 clientSecret: # Vssue 的 OAuth 应用 Client Secret。 autoCreateIssue: false # 是否自动创建评论议题。 waline: serverURL: # Waline 评论系统的服务器 URL。 lang: # Waline 的语言设置。 pageview: # 是否启用页面浏览统计。 emoji: # Waline 的 Emoji 表情包地址。 - https://unpkg.com/@waline/emojis@1.0.1/weibo requiredMeta: - name # 评论时需要填写的字段，用户名。 - email # 评论时需要填写的字段，电子邮件地址。 - url # 评论时需要填写的字段，网址。 locale: admin: Admin # Waline 评论系统的管理员名称。 placeholder: # Waline 评论框的占位符文本。 twikoo: envId: # Twikoo 评论系统的环境 ID。 region: # Twikoo 评论系统的部署区域。 path: # Twikoo 评论系统的路径。 lang: # Twikoo 评论系统的语言设置。 cactus: defaultHomeserverUrl: \u0026#34;https://matrix.cactus.chat:8448\u0026#34; # Cactus.Chat 的默认主服务器 URL。 serverName: \u0026#34;cactus.chat\u0026#34; # Cactus.Chat 的服务器名称。 siteName: \u0026#34;\u0026#34; # You must insert a unique identifier here matching the one you registered (See https://cactus.chat/docs/getting-started/quick-start/#register-your-site) # Cactus.Chat 的站点名称，需与注册的标识符匹配。 giscus: repo: # Giscus 评论系统的 GitHub 仓库地址。 repoID: # Giscus 仓库的唯一标识符。 category: # Giscus 的分类名称。 categoryID: # Giscus 分类的唯一标识符。 mapping: # Giscus 的议题关联方式。 lightTheme: # Giscus 的浅色主题设置。 darkTheme: # Giscus 的深色主题设置。 reactionsEnabled: 1 # 是否启用 Giscus 的反应功能。 emitMetadata: 0 # 是否启用 Giscus 的元数据发射功能。 gitalk: owner: # Gitalk 评论系统的仓库所有者。 admin: # Gitalk 评论系统的管理员用户名。 repo: # Gitalk 评论的 GitHub 仓库地址。 clientID: # Gitalk 的 OAuth 应用 Client ID。 clientSecret: # Gitalk 的 OAuth 应用 Client Secret。 cusdis: host: # Cusdis 评论系统的主机地址。 id: # Cusdis 的站点标识符。 widgets: homepage: - type: search # 首页的小部件，搜索功能。 - type: archives # 首页的小部件，文章归档。 params: limit: 5 # 显示的归档文章数量。 - type: categories # 首页的小部件，文章分类。 params: limit: 10 # 显示的分类数量。 - type: tag-cloud # 首页的小部件，标签云。 params: limit: 10 # 显示的标签数量。 page: - type: toc # 页面的小部件，显示文章目录。 opengraph: twitter: # Your Twitter username site: # 你的 Twitter 用户名，将在 OpenGraph 元数据中使用。 # Available values: summary, summary_large_image card: summary_large_image # Twitter 卡片类型。可以选择 `summary` 或 `summary_large_image`，后者显示大图。 defaultImage: opengraph: enabled: false # 是否为没有特色图片的页面启用默认 OpenGraph 图片。 local: false # 是否使用本地图片作为 OpenGraph 图片。 src: # 默认 OpenGraph 图片的路径。 colorScheme: # Display toggle toggle: true # 是否在页面上显示颜色模式切换按钮。 # Available values: auto, light, dark default: auto # 默认的颜色模式。可以选择自动切换（auto），或固定为亮色（light）或暗色（dark）。 imageProcessing: cover: enabled: true # 是否为封面图片启用自动处理功能，例如裁剪、缩放等。 content: enabled: true # 是否为内容图片启用自动处理功能。 ### Custom menu ### See https://stack.jimmycai.com/config/menu ### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter menu: main: [] # 自定义主菜单的配置，可以在这里添加导航链接。 social: - identifier: github # 社交链接的标识符，通常用于指定图标。 name: GitHub # 链接的显示名称。 url: https://github.com/CaiJimmy/hugo-theme-stack # GitHub 个人主页的链接。 params: icon: brand-github # 使用的社交图标，这里是 GitHub 图标。 - identifier: twitter # 另一个社交链接配置，这里是 Twitter。 name: Twitter # Twitter 链接的显示名称。 url: https://twitter.com # Twitter 的链接。 params: icon: brand-twitter # 使用的社交图标，这里是 Twitter 图标。 related: includeNewer: true # 是否在相关文章中包含较新的文章。 threshold: 60 # 相关文章匹配的相似度阈值，范围是0到100。 toLower: false # 是否将标签和分类转换为小写。 indices: - name: tags # 使用标签作为相关文章的匹配依据。 weight: 100 # 标签匹配的权重值。 - name: categories # 使用分类作为相关文章的匹配依据。 weight: 200 # 分类匹配的权重值。 markup: goldmark: renderer: ## Set to true if you have HTML content inside Markdown unsafe: true # 如果 Markdown 中包含 HTML 内容，设置为 true 以允许渲染这些 HTML。 tableOfContents: endLevel: 4 # 目录生成时的最大标题级别。 ordered: true # 目录项是否使用有序列表。 startLevel: 2 # 目录生成时的起始标题级别。 highlight: noClasses: false # 语法高亮时是否禁用 CSS 类名。 codeFences: true # 是否启用代码块语法高亮。 guessSyntax: true # 是否自动猜测代码块的语言进行语法高亮。 lineNoStart: 1 # 代码行号的起始值。 lineNos: true # 是否在代码块中显示行号。 lineNumbersInTable: true # 是否在表格样式中显示行号。 tabWidth: 4 # 代码块中 Tab 的宽度（空格数）。 撰写文章 test_site/content/post/中新建文件夹test_post，在test_post中新建index.md文件，文章需要的图片文件也放入test_post或者床图中。\n在使用 hugo 命令生成的文章的最上面，都有一块被 +++ 或 --- 包裹出来的区域，它的官方名称是 “Front matter”， 用以指定文章的各项属性。参考如下链接： Front Matter 字段说明\n部署到Github page 下载安装git Git官网下载git 安装git，默认配置，一直点下一步 新建Github仓库 登录github账号,假设账号名为my_github_username 新建一个 Github 仓库，仓库名为 my_github_username.github.io，权限设置为 public. 备注（如果仓库中已经存在这个仓库名，可以换成my_github_account.github.io/XXX） 修改hugo配置文件 /test_site/hugo.yaml中修改baseurl: https://my_github_username.github.io/\n选择main分支 前往本仓库中的Setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，然后保存，会自动开启 https://my_github_username.github.io 的地址，这地址也是以后访问博客的地址\n设置git全局账号信息 按下Win + R, 输入cmd，输入以下代码：\n1 2 git config --global user.name \u0026#34;my_github_username\u0026#34; git config --global user.email \u0026#34;你注册 Github 的邮箱\u0026#34; 编译 生成public网页静态文件夹。 test_site中输入cmd，输入hugo server。从而本地编译执行生成了test_site/public文件夹\n推送 推送仓库至 Github Pages。\n1 2 3 4 5 6 7 8 9 10 11 12 cd public/ # 进入 public 文件夹 git init # 初始化当前文件夹（此处就是 public 文件夹）为一个本地 git 仓库 git add . # 将当前文件夹的所有文件加入到暂存区 git commit -m \u0026#34;first commit\u0026#34; # 把相关文件提交到本地仓库 git branch -M main git remote add origin https://github.com/my_github_username/my_github_username.github.io.git # 关联远程仓库。 # 远程仓库地址（git@github.com:username/username.github.io） # 也可以进入 Github 仓库-\u0026gt; Code -\u0026gt; SSH 复制远程仓库地址 git push -u origin main # 把相关文件推送到远程仓库的 main 分支 # 备注：push前需要开代理 检查 检查网站是否正常。https://my_github_username.github.io/\nGithub action自动部署 如果没有进行自动部署，我们每次更新博客时，都需要在已经搭建好环境的电脑上进行、都要手动进行 Hugo 编译，再推送 Public 文件夹到 Github 仓库。自动部署让整个写作+发布流程更加快捷，相当于把Hogo编译推送public文件夹的工作交给了github action。\n新建Github仓库 新建一个 Github 仓库，仓库名为 my_github_username_main，权限设置为 private.\n创建github账号token 点击github右上角账号界面中的Settings/Developer Settings/Personal access tokens/Tokens(classic)或者直接点开下面链接 https://github.com/settings/tokens/new 点击Generate new token (classic) Note: hugo部署 Expiration: No expiration Select scopes: repo workflow 点击Generate token 保存好token，这个token只会出现一次，假设是hugo_deploy_token 创建github action触发代码 新建/test_site/.github/workflows/deploy.yaml,复制以下代码到该文件中：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-24.04 # 原始值为ubuntu-latest，（Ubuntu使用latest会报warn，提示最新支持版本已经改为Ubuntu24.04 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的 Token 变量名 }} EXTERNAL_REPOSITORY: 用户名/仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 创建.gitignore文件 在hugo主文件创建.gitignore文件，来避免提交不必要的文件\n新建/test_site/.gitignore 将下面代码复制进去 1 2 3 4 5 6 7 # 自动生成的文件 public resources .hugo_build.lock # hugo命令 hugo.exe Token配置 github设置Token 为保证安全，将生成的 Token 保存在仓库的环境变量中\n前往仓库my_github_username_main的 Settings/Secuits/Secrets and variables/Actions 点击New repository secret Name: HUGO_TOKEN Secret: hugo_deploy_token 是上面的创建github账号token生成的token\nhugo设置Token 更改/test_site/.github/workflows/deploy.yaml中的参数PERSONAL_TOKEN\n方法一：直接把HUGO_TOKEN_secret复制过去。这种方法不安全，不推荐 方法二：设置/test_site/.github/workflows/deploy.yaml中的参数PERSONAL_TOKEN PERSONAL_TOKEN: ${{ secrets.HUGO_TOKEN }} 通过调用github仓库my_github_username_main环境变量，比方法一更安全\nhugo主文件上传 hugo主文件上传至my_github_username_main仓库，上传成功后会触发Github Action，来自动部署你的静态页面\n/test_site/界面cmd后，输入以下命令\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/my_github_username/my_github_username_main.git git push -u origin main 检查 检查my_github_username_main中的action，看是否有update记录 检查网站 https://my_github_username.github.io是否更新，github编译需要时间，git push成功后不会立马生效 更新网站 首次上传成功后，如果后面又需要上传更新网站\n/test_site/界面cmd后，输入以下命令\n1 2 3 git add . git commit -m \u0026#34;update\u0026#34; git push 链接 官方文档 hugo stack git markdown\n参考文章 brume.top letere\n","date":"2024-12-24T00:00:00Z","permalink":"https://ydashu.github.io/p/hugo%E5%BB%BA%E7%AB%99%E6%B5%81%E7%A8%8B/","title":"hugo建站流程"},{"content":" 内容 WordPress Shopify 适用于 Blog网站、B2B外贸、希望自主可控的B2C（相对更控用VPS、Hosting也可能被扫）、希望手续费低的B2C 一般的B2C(对于违禁品shopify会封)、对手续费不在意的B2C、简单快速上手 核心 Blog为核心的开源平台，后续发展各种主题和插件。 其中的Wocommerce是其中最常用的电商插件。 官方审核的主题和插件在后台可搜，定制化非审核的插件可以导入的模式插入 以电商为核心的盈利为主要目的的闭源平台，有一些主题和插件，但不多 是否可控 产品方面比shopify更可控； 安全方面不确定，感觉不如shopify 产品方面比不可控（违禁品可能被关店）； 安全方面不确定，感觉shopify好 费用 域名费用、hosting或VPS费用、CDN费用（网站流量低可白嫖）、主题和插件费用（破解版可白嫖）、支付网关交易手续费2.9% + 0.30美元左右 域名费用、月租费、 shopify payments支付：支付网关交易手续费； 第三方支付方式(如PayPal或Stripe)：第三方交易手续费、支付网关交易手续费。 支付网关交易手续费、第三方交易手续费：三种月租套餐的费率不同 功能性 定制化程度高 定制化程度低 易用性 相对复杂 相对简单 网站速度 取决于VPS或Hosting、CDN、主题、插件、代码、图片等多种因素。 其他条件不变，wordpress的Gutenberg主题比shopify快 取决于主题、、插件、代码、图片等多种因素 SEO 有很多插件，但是不推荐使用、现在SEO不在于技术，而是内容和站外引流 基本没什么插件 后台界面UI 更传统 更现代 ","date":"2024-12-24T00:00:00Z","permalink":"https://ydashu.github.io/p/wordpress-vs-shopify/","title":"WordPress vs Shopify"},{"content":" 备注：Hosting以honstinger为例，其他的Hosting博主目前还未使用\nVPS vs Hosting 内容 VPS Hosting 适用于 更强的代码能力、更强的主机配置能力；更加自主可控、VPS参数可选更多、预算充足 更快的建站、托管式安装wordpress和cpanel或hpanel(honstinger)等、预算有限 后台界面UI 相对复杂；纯linux代码或者安装cpanel 相对简单；自动安装hpanel(hongstinger)或cpanel(其他的) 网站速度 取决于VPS的参数、带宽的参数、CDN等。 一般来说比Hosting快 一般来说速度如下： wordpress(VPS \u0026gt; Hosting) \u0026gt; shopify 数据库 需要手动配置 自动配置好 费用 较高 较低 优势 主机配置更高、更加自主可控、一般固定ip 一键安装、每日备份、可视化创建邮箱、可视化文件管理、自动配置dns、自动SSL 劣势 很多功能需要手动设置，对建站人的要求高 低配版无固定ip、主机配置低 VPS搭建wordpress的方法 参考如下两个链接：\n腾讯云\n无码开发\nHosting的选择 2024年各服务商 主要Hostinger、IONOS、Bluehost、sitegroud等\n2024年的情况：\n首推Hosinger便宜好用，功能全，支持支付宝、国内银行发行的国际信用卡等支付。hpancel简单大气美观。\n其中IONOS最便宜，但是后台界面做的很差，国内银行发行的国际信用卡支付后有很大概率失败，不推荐。\nBluehost、sitegroud这两个也比较常用，其中sitegroud界面好于Bluehost，差于Hostinger。两者性价比中规中矩。\n小技巧： 可以用google搜索 wordpress hosting或者wordpress hosting coupon等关键词，有些有优惠。比如如下网站：top10.com 备注：这个技巧同样适用于域名的购买： domain coupon namecheap、domain coupon code namecheap等等关键词\n假设已经有另外一个服务商的账号，比如Hosinger。一般都有推广链接，会对推广人有返点并对被推广人优惠\n多渠道对比下，找出最适合的\nHosting初始化wordpress的方法 购买套餐 hostinger\n主要储存空间、访问人数、免费CDN、支持手动备份和静态p等区别，CDN可以用LiteSpeed Cache插件的quic.cloud替代，对储存空间、访问人数、静态ip没有要求的其实差别不大。\n静态IP地址是指在互联网上始终不变的IP地址。对于网站来说，使用静态IP地址有以下几个好处：（来自kimi）\n域名解析稳定性：\n静态IP地址不会改变，因此域名系统（DNS）记录可以永久指向同一个IP地址，这有助于确保域名解析的稳定性和可靠性。 安全性：\n静态IP地址可以更容易地设置防火墙规则和其他安全措施，因为IP地址是已知且不变的。这对于防止未授权访问和DDoS攻击等安全威胁至关重要。 远程访问：\n如果你需要远程访问服务器，静态IP地址可以简化VPN和其他远程访问技术的过程，因为你不需要担心IP地址会改变。 邮件服务：\n使用静态IP地址可以减少邮件服务提供商将你的邮件标记为垃圾邮件的风险，因为动态IP地址有时会被用于发送垃圾邮件。 搜索引擎优化（SEO）：\n虽然搜索引擎优化主要关注网站内容和链接，但拥有一个静态IP地址可以确保你的网站始终可访问，这对于搜索引擎爬虫来说是有利的。 API和集成：\n如果你的网站需要与其他服务或API集成，静态IP地址可以确保这些服务始终能够找到并访问你的服务器。 易于管理：\n静态IP地址使得管理网络和服务器配置变得更加简单，因为你不需要不断更新IP地址相关的配置。 安装wordpress 创建一个新的空白网站，里面的插件和主题都不勾选\n域名配置 设置属于你的域名，推荐namecheap平台。\n服务器位置选择 选择距离你的目标用户近的\nDNS配置 登录你的域名服务商的用户账号，按照下图的操作指南，将域名的dns设置为 ns1.dns-parking.com 和 ns2.dns-parking.com 一般来说会自动生成DNS的记录的key和value。如果要修改，比如改邮箱MX和TXT的记录值==\u0026gt;可在路径“website/Dashboard/Advanced/DNS Zone Editor”下修改.\nDns check网站 DNS Checker\n安装SSL 可在路径“website/Dashboard/Wordpresss/Overview/Core”下开启Force HTTPS这个选项，会自动安装SSL\n邮箱配置 hostinger自带邮箱 上述dns配置完成后，系统会自动生成MX指向hostinger的记录值 mx1.hostinger.com 和 mx2.hostinger.com\n点击Email/Manage/Email Account创建email账户\n在“Configure apps and devices ”这里有Browser和Recommended apps两个选项。如果要配置同步到gmail、outlook、163等支持IMAP/SMTP或POP的邮箱，选择Recommended apps这个选项，这个选项也可以用Browser登录，登录网站为mail.hostinger.com\n配置其他邮箱：以企业微信邮箱为例 配置MX MX: mxbiz1.qq.com 和 mxbiz2.qq.com\n参考文档：https://open.work.weixin.qq.com/help2/pc/15333\n配置TXT SPF 主机记录：@或者为空 记录类型：TXT TXT记录值为：v=spf1 include:spf.mail.qq.com ~all 参考文档为 https://open.work.weixin.qq.com/help2/pc/14554 DKIM 需要按照企业微信的路径”企业微信管理后台-\u0026gt;协作-\u0026gt;邮件-\u0026gt;设置-\u0026gt;DKIM验证-\u0026gt;配置”获取配置信息 参考文档为 https://open.work.weixin.qq.com/help2/pc/19647 DMARC 主机记录：_dmarc 记录类型：TXT 记录值: v=DMARC1; p=none; rua=mailto:mailauth-reports@qq.com 参考文档为 https://open.work.weixin.qq.com/help2/pc/19820 ","date":"2024-12-24T00:00:00Z","permalink":"https://ydashu.github.io/p/wordpress%E4%BD%BF%E7%94%A8vps%E5%92%8Chosting/","title":"wordpress使用VPS和Hosting"},{"content":" 主题名称 推荐指数 速度评级 官方评分 速度 模板库 默认的编辑器 woocommerce 文档 视频 generatePress 1 1 5 1 少 GenerateBlocks 可以用GreenShift woo addon，但不推荐 https://docs.generatepress.com/ https://www.youtube.com/@GeneratePress/playlists blocksy 2 2 5 2 较多 GreenShift或Stackable 配合GreenShift woo addon自定义产品界面https://www.youtube.com/watch?v=M0pVNdurzc0\u0026amp;list=PLIEKo1RENmYxv7s01erTf4Y6JbClr5AEk\u0026amp;index=34 https://creativethemes.com/blocksy/docs/ https://www.youtube.com/@CreativeThemes/playlists kadence 3 3 5 3 较多 Kadence Blocks 配合Kadence Shop Kit (WooCommerce Extras)自定义产品界面https://www.youtube.com/watch?v=Nk6VXAzRRFQ https://www.kadencewp.com/help-center/knowledge-base/kadence-theme/ https://www.youtube.com/@KadenceWP/playlists Twenty Twenty 9 9 4 4 源生 https://wordpress.org/documentation/category/default-themes/ https://www.youtube.com/results?search_query=wordpress+Twenty+Twenty\u0026amp;sp=EgIQAw%253D%253D betheme 11 11 99 多 Bebuilder https://support.muffingroup.com/documentation/ https://www.youtube.com/results?search_query=betheme\u0026amp;sp=EgIQAw%253D%253D hello elementor 99 11 14 4.5 少 elementor https://www.youtube.com/results?search_query=hello+elementor\u0026amp;sp=EgIQAw%253D%253D astra 99 11 13 5 非常多 elementor https://wpastra.com/docs/ https://www.youtube.com/results?search_query=astra+theme\u0026amp;sp=EgIQAw%253D%253D 什么是wordpress主题 主题（Theme） 是一组文件（包括模板、样式表、脚本和媒体）组成的工具，用于定义网站的外观和布局。简单来说，主题决定了你的网站看起来是什么样子，并控制了内容如何在前端呈现。\n主题的作用 wordpress的主题主要控制appearance。如增加如elementor和widgets等组件、Customize中的配置控制、页面的结构和内容呈现。例如：\nindex.php：主模板文件 header.php：定义页面头部 footer.php：定义页面底部 single.php：单篇文章页面模板 page.php：单独页面模板 archive.php：存档页面模板 什么是wordpress编辑器 WordPress编辑器 是用于创建、编辑和管理内容（如文章、页面等）的工具。它是WordPress中最重要的部分之一，负责让用户以可视化的方式编写内容，无需编写代码。\nindex.php：主模板文件 header.php：定义页面头部 footer.php：定义页面底部 single.php：单篇文章页面模板 page.php：单独页面模板 archive.php：存档页面模板 编辑器分类 wordpress编辑器主要分为三个大类\n传统编辑器 classic editor 最为传统的编辑器，wordpress 5.0之前版本的默认编辑器 支持html编辑 现在也常用于woocommerce的产品编辑界面或者配合(ACF+动态变量)使用 区块编辑器 block editor/Gutenberg wordpress 5.0之后版本的默认编辑器 速度比拖拽式编辑器快 魔改版本：GenerateBlocks、GreenShift、Stackable、Kadence Blocks等 页面构建器Page Builders 新手友好，拖拽式编辑 速度慢 常见的elementor、Bebulider、Divi Builder、WPBakery 等等 ","date":"2024-12-24T00:00:00Z","permalink":"https://ydashu.github.io/p/wordpress%E4%B8%BB%E9%A2%98/","title":"wordpress主题"},{"content":"分类设置 建站 wordpress shopify hugo google AI IT 金融 随记 未分类 待完成 wordpress 提升网站响应速度 架构 代码分类 插件。。。 shopify 插件 后台 google GMC google搜索技巧 SEO google ads广告类型介绍 google ads优化 未分类 tailscale-远程软件使用教程 ？电商 外贸 外贸 B2B vs B2C 外贸流程 -参考小红书 外贸获客途径 ","date":"2024-12-24T00:00:00Z","permalink":"https://ydashu.github.io/p/%E5%8D%9A%E5%AE%A2%E6%80%BB%E8%A7%88/","title":"博客总览"}]