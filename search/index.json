[{"content":"Front Matter的3种代码 hugo的Front Matter字段输出有3种形式，分别是\nyaml toml json 详细信息参考官方文档： gohugo.io\n常见的字段 title ：文章标题。自动生成的标题与文件名保持一致。 date：文章创建日期。默认生成的日期为文件创建时的日期。 lastmod：文章最后更新日期。 description：文章简要描述，用于摘要或 SEO 优化。 categories：文章分类。 tags：文章标签。 image：封面图片。 draft：是否为草稿。如果设置为 true，Hugo 将不会编译该文件，文章也不会在页面中显示。 hidden：是否隐藏文章。与 draft 的区别在于，设置为 true 的文章仍然存在，只是不会在页面中显示，但可以通过正确的网址访问。 toml demo 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 +++ author = \u0026#34;Hugo Authors\u0026#34; # 作者名称，用于标识文章的创作者。 title = \u0026#34;Markdown Syntax Guide\u0026#34; # 文章标题，将显示在页面和导航中。 date = \u0026#34;2019-03-11\u0026#34; # 文章的发布日期，用于排序和展示。 description = \u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; # 文章的简短描述，通常用于摘要或 SEO。 tags = [ \u0026#34;markdown\u0026#34;, # 文章的标签，用于分类和搜索。标签是灵活的，可以添加多个。 \u0026#34;css\u0026#34;, \u0026#34;html\u0026#34;, \u0026#34;themes\u0026#34;, ] categories = [ \u0026#34;themes\u0026#34;, # 文章的类别，用于组织和过滤内容。每篇文章可以属于一个或多个类别。 \u0026#34;syntax\u0026#34;, ] series = [\u0026#34;Themes Guide\u0026#34;] # 文章系列，通常用于将相关文章组织在一起，例如教程或主题指南系列。 aliases = [\u0026#34;migrate-from-jekyl\u0026#34;] # 别名，用于创建文章的旧路径重定向到新路径。例如，当迁移文章时使用。 image = \u0026#34;pawel-czerwinski-8uZPynIu-rQ-unsplash.jpg\u0026#34; # 文章的封面图片路径，用于展示文章时的视觉效果。 +++ ","date":"2024-12-24T00:00:00Z","permalink":"https://ydashu.github.io/p/front-matter-%E5%AD%97%E6%AE%B5%E8%AF%B4%E6%98%8E/","title":"Front Matter 字段说明"},{"content":"hugo:The world’s fastest framework for building websites\n自称是最快的建站框架 静态网站，hugo比hexo快 网站速度hugo \u0026gt; hexo \u0026gt; (wordpresss ? shopify) 可以零成本搭建（本地计算机 + github page等免费host ?+ github action自动触发） 官网：gohugo.io 下面以 windows本地计算机 + github page + github action展示建站流程\n下载并安装hugo 在 Hugo 的 Release 页面找到最新版本的 Hugo ，选择相应版本下载。windows为hugo_extended_X.XXX.X_windows-amd64.zip，X.XXX.X为版本号。\n创建站点 解压文件。在文件夹上方地址栏输入 cmd ，唤起命令行。在命令行中输入 hugo new site test_site ，创建站点。\n环境变量 将 hugo.exe 复制到test_site文件夹中，以避免配置环境变量。\n启动hugo cmd中输入cd test_site 或者关闭cmd窗口并在test_site中重新输入cmd cmd中输入命令hugo server 启动本地站点(通过 Ctrl + C 关闭这一服务)。地址通常是 localhost:1313 。如果页面显示“Page not found”，说明此前的所有配置都是正常无误的。 具体的hugo命令参考官网hugo conmands 配置主题 Hugo 默认是没有主题的，需要到 官网 去下载主题。我使用的主题是 Jimmy Cai 创作的 Stack 主题。接下来的部分内容会以此主题为例。\n下载Stack主题 hugo-theme-stack\n文件调整 将主题下载完成后重命名为hugo-theme-stack并解压至 themes 文件夹中，将test_site/themes/hugo-theme-stack/exampleSite/ 文件夹中 content 和hugo.yaml 复制到test_site/中，并删掉原来的 hugo.toml 和 Content/post/rich-content （rich-content中有需要梯子的链接，hugo server会出现错误），避免出现不兼容的错误。 修改 hugo.yaml 中的 theme 选项，将其修改为theme: hugo-theme-stack 检查网站 启动hugo server 检查网址localhost:1313是否是正常的stack主题 修改配置文件 hugo.yaml 中其他选项修改:\nlanguageCode: zh-cn title: XXX copyright: XXX DefaultContentLanguage: zh-cn hasCJKLanguage: true\n1 2 3 4 5 6 7 8 languages: zh-cn: languageName: 中文 title: ydashu weight: 1 params: sidebar: subtitle: 配置文件参数介绍 官方文档 stack文档 各项配置解释如下baseurl: https://example.com # 网站的基本 URL 。替换为你自己的网站域名。 languageCode: en-us # 网站的默认语言代码，zh-cn 指中文简体。 theme: hugo-theme-stack # 使用的 Hugo 主题，这里是 Stack 主题。 paginate: 3 # 每页显示的内容数量，通常用于分页设置。 title: Example Site # 网站的标题，会显示在浏览器标签上。 copyright: Example Person # 网站的版权信息，通常显示在页面底部。 # Theme i18n support # Available values: ar, bn, ca, de, el, en, es, fr, hu, id, it, ja, ko, nl, pt-br, th, uk, zh-cn, zh-hk, zh-tw DefaultContentLanguage: en # 设置网站的默认内容语言。可选值见上注释。 # Set hasCJKLanguage to true if DefaultContentLanguage is in [zh-cn ja ko] # This will make .Summary and .WordCount behave correctly for CJK languages. hasCJKLanguage: false # 如果默认语言是中文、日文或韩文，设置为 true 以确保摘要和字数统计正确。 languages: en: languageName: English # 英语语言配置 title: Example Site # 英文站点标题 weight: 1 # 语言权重，数值越小排序越靠前 params: description: Example description # 英文站点描述 zh-cn: languageName: 中文 # 中文语言配置 title: 演示站点 # 中文站点标题 weight: 2 # 中文站点语言权重 params: description: 演示说明 # 中文站点描述 ar: languageName: عربي # 阿拉伯语配置 languagedirection: rtl # 文字方向，从右到左 title: موقع تجريبي # 阿拉伯语站点标题 weight: 3 # 阿拉伯语站点语言权重 params: description: وصف تجريبي # 阿拉伯语站点描述 services: # Change it to your Disqus shortname before using disqus: shortname: \u0026#34;hugo-theme-stack\u0026#34; # Disqus 评论系统的短名称，需替换为你自己的 Disqus 短名称。 # GA Tracking ID googleAnalytics: id: # Google Analytics 追踪 ID，用于网站流量统计。 permalinks: post: /p/:slug/ # 博客文章的永久链接格式，使用文章的 slug 作为路径。 page: /:slug/ # 页面内容的永久链接格式。 params: mainSections: - post # 主内容区域，显示文章内容。 featuredImageField: image # 特色图片字段的名称。 rssFullContent: true # RSS 提要是否包含全文内容。 favicon: # e.g.: favicon placed in `static/favicon.ico` of your site folder, then set this field to `/favicon.ico` (`/` is necessary) # 网站的favicon路径，例如`/favicon.ico`。 footer: since: 2020 # 网站创建年份，通常显示在页脚。 customText: # 自定义页脚文本。 dateFormat: published: Jan 02, 2006 # 发布日期格式。 lastUpdated: Jan 02, 2006 15:04 MST # 最后更新日期格式。 sidebar: emoji: 🍥 # 侧边栏标题旁显示的 emoji。 subtitle: Lorem ipsum dolor sit amet, consectetur adipiscing elit. # 侧边栏的副标题。 avatar: enabled: true # 是否启用头像显示。 local: true # 是否使用本地头像。 src: img/avatar.png # 头像图片路径。 article: math: false # 是否支持数学公式渲染。 toc: true # 是否显示文章目录。 readingTime: true # 是否显示预计阅读时间。 license: enabled: true # 是否启用文章版权信息。 default: Licensed under CC BY-NC-SA 4.0 # 默认版权协议。 comments: enabled: true # 是否启用评论功能。 provider: disqus # 选择的评论提供商，默认为 Disqus。 disqusjs: shortname: # DisqusJS 的短名称。 apiUrl: # DisqusJS 的 API URL。 apiKey: # DisqusJS 的 API Key。 admin: # DisqusJS 的管理员用户名。 adminLabel: # DisqusJS 管理员标签。 utterances: repo: # Utterances 评论系统的 GitHub 仓库地址。 issueTerm: pathname # Utterances 评论系统的议题关联方式，使用页面路径。 label: # Utterances 评论系统的标签。 beaudar: repo: # Beaudar 评论系统的 GitHub 仓库地址。 issueTerm: pathname # Beaudar 评论系统的议题关联方式。 label: # Beaudar 评论系统的标签。 theme: # Beaudar 评论系统的主题。 remark42: host: # Remark42 的主机地址。 site: # Remark42 的站点标识符。 locale: # Remark42 的语言设置。 vssue: platform: # Vssue 使用的平台（例如 GitHub）。 owner: # Vssue 评论仓库的所有者。 repo: # Vssue 评论的 GitHub 仓库地址。 clientId: # Vssue 的 OAuth 应用 Client ID。 clientSecret: # Vssue 的 OAuth 应用 Client Secret。 autoCreateIssue: false # 是否自动创建评论议题。 waline: serverURL: # Waline 评论系统的服务器 URL。 lang: # Waline 的语言设置。 pageview: # 是否启用页面浏览统计。 emoji: # Waline 的 Emoji 表情包地址。 - https://unpkg.com/@waline/emojis@1.0.1/weibo requiredMeta: - name # 评论时需要填写的字段，用户名。 - email # 评论时需要填写的字段，电子邮件地址。 - url # 评论时需要填写的字段，网址。 locale: admin: Admin # Waline 评论系统的管理员名称。 placeholder: # Waline 评论框的占位符文本。 twikoo: envId: # Twikoo 评论系统的环境 ID。 region: # Twikoo 评论系统的部署区域。 path: # Twikoo 评论系统的路径。 lang: # Twikoo 评论系统的语言设置。 cactus: defaultHomeserverUrl: \u0026#34;https://matrix.cactus.chat:8448\u0026#34; # Cactus.Chat 的默认主服务器 URL。 serverName: \u0026#34;cactus.chat\u0026#34; # Cactus.Chat 的服务器名称。 siteName: \u0026#34;\u0026#34; # You must insert a unique identifier here matching the one you registered (See https://cactus.chat/docs/getting-started/quick-start/#register-your-site) # Cactus.Chat 的站点名称，需与注册的标识符匹配。 giscus: repo: # Giscus 评论系统的 GitHub 仓库地址。 repoID: # Giscus 仓库的唯一标识符。 category: # Giscus 的分类名称。 categoryID: # Giscus 分类的唯一标识符。 mapping: # Giscus 的议题关联方式。 lightTheme: # Giscus 的浅色主题设置。 darkTheme: # Giscus 的深色主题设置。 reactionsEnabled: 1 # 是否启用 Giscus 的反应功能。 emitMetadata: 0 # 是否启用 Giscus 的元数据发射功能。 gitalk: owner: # Gitalk 评论系统的仓库所有者。 admin: # Gitalk 评论系统的管理员用户名。 repo: # Gitalk 评论的 GitHub 仓库地址。 clientID: # Gitalk 的 OAuth 应用 Client ID。 clientSecret: # Gitalk 的 OAuth 应用 Client Secret。 cusdis: host: # Cusdis 评论系统的主机地址。 id: # Cusdis 的站点标识符。 widgets: homepage: - type: search # 首页的小部件，搜索功能。 - type: archives # 首页的小部件，文章归档。 params: limit: 5 # 显示的归档文章数量。 - type: categories # 首页的小部件，文章分类。 params: limit: 10 # 显示的分类数量。 - type: tag-cloud # 首页的小部件，标签云。 params: limit: 10 # 显示的标签数量。 page: - type: toc # 页面的小部件，显示文章目录。 opengraph: twitter: # Your Twitter username site: # 你的 Twitter 用户名，将在 OpenGraph 元数据中使用。 # Available values: summary, summary_large_image card: summary_large_image # Twitter 卡片类型。可以选择 `summary` 或 `summary_large_image`，后者显示大图。 defaultImage: opengraph: enabled: false # 是否为没有特色图片的页面启用默认 OpenGraph 图片。 local: false # 是否使用本地图片作为 OpenGraph 图片。 src: # 默认 OpenGraph 图片的路径。 colorScheme: # Display toggle toggle: true # 是否在页面上显示颜色模式切换按钮。 # Available values: auto, light, dark default: auto # 默认的颜色模式。可以选择自动切换（auto），或固定为亮色（light）或暗色（dark）。 imageProcessing: cover: enabled: true # 是否为封面图片启用自动处理功能，例如裁剪、缩放等。 content: enabled: true # 是否为内容图片启用自动处理功能。 ### Custom menu ### See https://stack.jimmycai.com/config/menu ### To remove about, archive and search page menu item, remove `menu` field from their FrontMatter menu: main: [] # 自定义主菜单的配置，可以在这里添加导航链接。 social: - identifier: github # 社交链接的标识符，通常用于指定图标。 name: GitHub # 链接的显示名称。 url: https://github.com/CaiJimmy/hugo-theme-stack # GitHub 个人主页的链接。 params: icon: brand-github # 使用的社交图标，这里是 GitHub 图标。 - identifier: twitter # 另一个社交链接配置，这里是 Twitter。 name: Twitter # Twitter 链接的显示名称。 url: https://twitter.com # Twitter 的链接。 params: icon: brand-twitter # 使用的社交图标，这里是 Twitter 图标。 related: includeNewer: true # 是否在相关文章中包含较新的文章。 threshold: 60 # 相关文章匹配的相似度阈值，范围是0到100。 toLower: false # 是否将标签和分类转换为小写。 indices: - name: tags # 使用标签作为相关文章的匹配依据。 weight: 100 # 标签匹配的权重值。 - name: categories # 使用分类作为相关文章的匹配依据。 weight: 200 # 分类匹配的权重值。 markup: goldmark: renderer: ## Set to true if you have HTML content inside Markdown unsafe: true # 如果 Markdown 中包含 HTML 内容，设置为 true 以允许渲染这些 HTML。 tableOfContents: endLevel: 4 # 目录生成时的最大标题级别。 ordered: true # 目录项是否使用有序列表。 startLevel: 2 # 目录生成时的起始标题级别。 highlight: noClasses: false # 语法高亮时是否禁用 CSS 类名。 codeFences: true # 是否启用代码块语法高亮。 guessSyntax: true # 是否自动猜测代码块的语言进行语法高亮。 lineNoStart: 1 # 代码行号的起始值。 lineNos: true # 是否在代码块中显示行号。 lineNumbersInTable: true # 是否在表格样式中显示行号。 tabWidth: 4 # 代码块中 Tab 的宽度（空格数）。 撰写文章 test_site/content/post/中新建文件夹test_post，在test_post中新建index.md文件，文章需要的图片文件也放入test_post或者床图中。\n在使用 hugo 命令生成的文章的最上面，都有一块被 +++ 或 --- 包裹出来的区域，它的官方名称是 “Front matter”， 用以指定文章的各项属性。参考如下链接： Front Matter 字段说明\n部署到Github page 下载安装git Git官网下载git 安装git，默认配置，一直点下一步 新建Github仓库 登录github账号,假设账号名为my_github_username 新建一个 Github 仓库，仓库名为 my_github_username.github.io，权限设置为 public. 备注（如果仓库中已经存在这个仓库名，可以换成my_github_account.github.io/XXX） 修改hugo配置文件 /test_site/hugo.yaml中修改baseurl: https://my_github_username.github.io/\n选择main分支 前往本仓库中的Setting -\u0026gt; Pages -\u0026gt; Branch选择main分支，然后保存，会自动开启 https://my_github_username.github.io 的地址，这地址也是以后访问博客的地址\n设置git全局账号信息 按下Win + R, 输入cmd，输入以下代码：\n1 2 git config --global user.name \u0026#34;my_github_username\u0026#34; git config --global user.email \u0026#34;你注册 Github 的邮箱\u0026#34; 编译 生成public网页静态文件夹。 test_site中输入cmd，输入hugo server。从而本地编译执行生成了test_site/public文件夹\n推送 推送仓库至 Github Pages。\n1 2 3 4 5 6 7 8 9 10 11 12 cd public/ # 进入 public 文件夹 git init # 初始化当前文件夹（此处就是 public 文件夹）为一个本地 git 仓库 git add . # 将当前文件夹的所有文件加入到暂存区 git commit -m \u0026#34;first commit\u0026#34; # 把相关文件提交到本地仓库 git branch -M main git remote add origin https://github.com/my_github_username/my_github_username.github.io.git # 关联远程仓库。 # 远程仓库地址（git@github.com:username/username.github.io） # 也可以进入 Github 仓库-\u0026gt; Code -\u0026gt; SSH 复制远程仓库地址 git push -u origin main # 把相关文件推送到远程仓库的 main 分支 # 备注：push前需要开代理 检查 检查网站是否正常。https://my_github_username.github.io/\nGithub action自动部署 如果没有进行自动部署，我们每次更新博客时，都需要在已经搭建好环境的电脑上进行、都要手动进行 Hugo 编译，再推送 Public 文件夹到 Github 仓库。自动部署让整个写作+发布流程更加快捷，相当于把Hogo编译推送public文件夹的工作交给了github action。\n新建Github仓库 新建一个 Github 仓库，仓库名为 my_github_username_main，权限设置为 private.\n创建github账号token 点击github右上角账号界面中的Settings/Developer Settings/Personal access tokens/Tokens(classic)或者直接点开下面链接 https://github.com/settings/tokens/new 点击Generate new token (classic) Note: hugo部署 Expiration: No expiration Select scopes: repo workflow 点击Generate token 保存好token，这个token只会出现一次，假设是hugo_deploy_token 创建github action触发代码 新建/test_site/.github/workflows/deploy.yaml,复制以下代码到该文件中：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-24.04 # 原始值为ubuntu-latest，（Ubuntu使用latest会报warn，提示最新支持版本已经改为Ubuntu24.04 steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.你的 Token 变量名 }} EXTERNAL_REPOSITORY: 用户名/仓库名 PUBLISH_BRANCH: main PUBLISH_DIR: ./public commit_message: auto deploy 创建.gitignore文件 在hugo主文件创建.gitignore文件，来避免提交不必要的文件\n新建/test_site/.gitignore 将下面代码复制进去 1 2 3 4 5 6 7 # 自动生成的文件 public resources .hugo_build.lock # hugo命令 hugo.exe Token配置 github设置Token 为保证安全，将生成的 Token 保存在仓库的环境变量中\n前往仓库my_github_username_main的 Settings/Secuits/Secrets and variables/Actions 点击New repository secret Name: HUGO_TOKEN Secret: hugo_deploy_token 是上面的创建github账号token生成的token\nhugo设置Token 更改/test_site/.github/workflows/deploy.yaml中的参数PERSONAL_TOKEN\n方法一：直接把HUGO_TOKEN_secret复制过去。这种方法不安全，不推荐 方法二：设置/test_site/.github/workflows/deploy.yaml中的参数PERSONAL_TOKEN PERSONAL_TOKEN: ${{ secrets.HUGO_TOKEN }} 通过调用github仓库my_github_username_main环境变量，比方法一更安全\nhugo主文件上传 hugo主文件上传至my_github_username_main仓库，上传成功后会触发Github Action，来自动部署你的静态页面\n/test_site/界面cmd后，输入以下命令\n1 2 3 4 5 6 git init git add . git commit -m \u0026#34;first commit\u0026#34; git branch -M main git remote add origin https://github.com/my_github_username/my_github_username_main.git git push -u origin main 检查 检查my_github_username_main中的action，看是否有update记录 检查网站 https://my_github_username.github.io是否更新，github编译需要时间，git push成功后不会立马生效 更新网站 首次上传成功后，如果后面又需要上传更新网站\n/test_site/界面cmd后，输入以下命令\n1 2 3 git add . git commit -m \u0026#34;update\u0026#34; git push 链接 官方文档 hugo stack git markdown\n参考文章 brume.top letere\n","date":"2024-12-24T00:00:00Z","permalink":"https://ydashu.github.io/p/hugo%E5%BB%BA%E7%AB%99%E6%B5%81%E7%A8%8B/","title":"hugo建站流程"},{"content":"分类设置 建站 wordpress shopify hugo google AI IT 金融 未分类 ","date":"2024-12-24T00:00:00Z","permalink":"https://ydashu.github.io/p/%E5%8D%9A%E5%AE%A2%E6%80%BB%E8%A7%88/","title":"博客总览"}]